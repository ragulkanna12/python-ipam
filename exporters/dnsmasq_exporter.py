"""DNSmasq export functionality."""

from typing import Any, List
from urllib.parse import parse_qs, urlparse

from . import BaseExporter


class DNSmasqExporter(BaseExporter):
    """DNSmasq format exporter for hosts with configurable modes."""

    def __init__(self, mode: str = "combined"):
        """Initialize DNSmasq exporter.

        Args:
            mode: Export mode - 'dns', 'dhcp', or 'combined' (default)
        """
        if mode not in ["dns", "dhcp", "combined"]:
            raise ValueError(
                f"Invalid mode '{mode}'. Must be 'dns', 'dhcp', or 'combined'"
            )
        self.mode = mode

    @property
    def format_name(self) -> str:
        return f"DNSmasq ({self.mode.upper()})"

    @property
    def file_extension(self) -> str:
        return "conf"

    @property
    def mime_type(self) -> str:
        return "text/plain"

    def export_networks(self, networks: List[Any]) -> bytes:
        """Export networks to DNSmasq format (not applicable for DNSmasq)."""
        raise NotImplementedError(
            "DNSmasq exporter only supports host exports, not networks"
        )

    def export_hosts(self, hosts: List[Any]) -> bytes:
        """Export hosts to DNSmasq format based on configured mode.

        Modes:
        - 'dns': Only host-record entries for DNS resolution
        - 'dhcp': Only dhcp-host entries for DHCP reservations
        - 'combined': Both DNS and DHCP entries (default)
        """
        lines = [
            f"# DNSmasq host configuration - {self.mode.upper()} mode",
            "# Generated by Python IPAM",
        ]

        # Add format explanation based on mode
        if self.mode == "dns":
            lines.extend(
                [
                    "# DNS-only mode: host-record=hostname,IP",
                    "# Use this for DNSmasq as DNS server only",
                    "",
                ]
            )
        elif self.mode == "dhcp":
            lines.extend(
                [
                    "# DHCP-only mode: dhcp-host=MAC,IP,hostname",
                    "# Use this for DNSmasq as DHCP server only",
                    "",
                ]
            )
        else:  # combined
            lines.extend(
                [
                    "# Combined mode: dhcp-host=MAC,IP,hostname + host-record=hostname,IP",
                    "# Use this for DNSmasq as both DNS and DHCP server",
                    "",
                ]
            )

        active_hosts = [h for h in hosts if h.status == "active" and h.hostname]
        reserved_hosts = [
            h for h in hosts if h.status == "reserved" and h.hostname
        ]

        # Process active hosts
        if active_hosts:
            lines.append("# Active hosts")
            for host in active_hosts:
                entries = self._generate_host_entries(host)
                lines.extend(entries)
            lines.append("")

        # Process reserved hosts
        if reserved_hosts:
            lines.append("# Reserved hosts")
            for host in reserved_hosts:
                entries = self._generate_host_entries(host)
                lines.extend(entries)
            lines.append("")

        # Add CNAME entries for all modes
        cname_hosts = [
            h
            for h in hosts
            if h.cname and h.hostname and h.status in ["active", "reserved"]
        ]
        if cname_hosts:
            lines.append("# CNAME aliases")
            for host in cname_hosts:
                lines.append(f"cname={host.cname},{host.hostname}")
            lines.append("")

        # Add statistics
        stats = self._calculate_statistics(hosts)
        lines.extend(
            [
                "# Statistics:",
                f"# Total exported entries: {stats['total']}",
                f"# Hosts with entries: {stats['hosts_with_entries']}",
            ]
        )

        if self.mode in ["dhcp", "combined"]:
            lines.append(f"# DHCP reservations: {stats['dhcp_entries']}")
        if self.mode in ["dns", "combined"]:
            lines.append(f"# DNS records: {stats['dns_entries']}")

        # Always show CNAME statistics if any exist
        if stats["cname_entries"] > 0:
            lines.append(f"# CNAME aliases: {stats['cname_entries']}")

        return "\n".join(lines).encode("utf-8")

    def _generate_host_entries(self, host) -> List[str]:
        """Generate DNSmasq entries for a single host based on mode."""
        entries = []

        if self.mode == "dns":
            # DNS-only mode: only host-record entries
            entries.append(f"host-record={host.hostname},{host.ip_address}")

        elif self.mode == "dhcp":
            # DHCP-only mode: only dhcp-host entries (requires MAC address)
            if host.mac_address:
                entries.append(
                    f"dhcp-host={host.mac_address},{host.ip_address},{host.hostname}"
                )
            # Skip hosts without MAC address in DHCP-only mode

        else:  # combined mode
            if host.mac_address:
                # DHCP reservation (includes DNS resolution)
                entries.append(
                    f"dhcp-host={host.mac_address},{host.ip_address},{host.hostname}"
                )
            else:
                # DNS-only record for hosts without MAC
                entries.append(f"host-record={host.hostname},{host.ip_address}")

        return entries

    def _calculate_statistics(self, hosts) -> dict:
        """Calculate export statistics."""
        hosts_with_hostname = [
            h
            for h in hosts
            if h.hostname and h.status in ["active", "reserved"]
        ]

        total_entries = 0
        dhcp_entries = 0
        dns_entries = 0

        for host in hosts_with_hostname:
            if self.mode == "dns":
                total_entries += 1
                dns_entries += 1
            elif self.mode == "dhcp":
                if host.mac_address:
                    total_entries += 1
                    dhcp_entries += 1
            else:  # combined
                total_entries += 1
                if host.mac_address:
                    dhcp_entries += 1
                else:
                    dns_entries += 1

        # Count CNAME entries
        cname_entries = len([h for h in hosts_with_hostname if h.cname])

        return {
            "total": total_entries,
            "hosts_with_entries": len(hosts_with_hostname),
            "dhcp_entries": dhcp_entries,
            "dns_entries": dns_entries,
            "cname_entries": cname_entries,
        }
